// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nDays(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get inAsset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get outAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get inAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get auxiliaryData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fractionOfPool(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClipperDirectExchange__vestingDepositsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClipperDirectExchange extends ethereum.SmartContract {
  static bind(address: Address): ClipperDirectExchange {
    return new ClipperDirectExchange("ClipperDirectExchange", address);
  }

  DESIGNATED_SIGNER(): Address {
    let result = super.call(
      "DESIGNATED_SIGNER",
      "DESIGNATED_SIGNER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_DESIGNATED_SIGNER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "DESIGNATED_SIGNER",
      "DESIGNATED_SIGNER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canUnlockDeposit(theAddress: Address): boolean {
    let result = super.call(
      "canUnlockDeposit",
      "canUnlockDeposit(address):(bool)",
      [ethereum.Value.fromAddress(theAddress)]
    );

    return result[0].toBoolean();
  }

  try_canUnlockDeposit(theAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canUnlockDeposit",
      "canUnlockDeposit(address):(bool)",
      [ethereum.Value.fromAddress(theAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isToken(token: Address): boolean {
    let result = super.call("isToken", "isToken(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isToken(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isToken", "isToken(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastBalances(param0: Address): BigInt {
    let result = super.call("lastBalances", "lastBalances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastBalances",
      "lastBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nTokens(): BigInt {
    let result = super.call("nTokens", "nTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nTokens", "nTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAt(i: BigInt): Address {
    let result = super.call("tokenAt", "tokenAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);

    return result[0].toAddress();
  }

  try_tokenAt(i: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAt", "tokenAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(i)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlockDeposit(): BigInt {
    let result = super.call("unlockDeposit", "unlockDeposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unlockDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockDeposit",
      "unlockDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingDeposits(
    param0: Address
  ): ClipperDirectExchange__vestingDepositsResult {
    let result = super.call(
      "vestingDeposits",
      "vestingDeposits(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ClipperDirectExchange__vestingDepositsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_vestingDeposits(
    param0: Address
  ): ethereum.CallResult<ClipperDirectExchange__vestingDepositsResult> {
    let result = super.tryCall(
      "vestingDeposits",
      "vestingDeposits(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClipperDirectExchange__vestingDepositsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get theSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnToWithdrawCall extends ethereum.Call {
  get inputs(): BurnToWithdrawCall__Inputs {
    return new BurnToWithdrawCall__Inputs(this);
  }

  get outputs(): BurnToWithdrawCall__Outputs {
    return new BurnToWithdrawCall__Outputs(this);
  }
}

export class BurnToWithdrawCall__Inputs {
  _call: BurnToWithdrawCall;

  constructor(call: BurnToWithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnToWithdrawCall__Outputs {
  _call: BurnToWithdrawCall;

  constructor(call: BurnToWithdrawCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get nDays(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get poolTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get theSignature(): DepositCallTheSignatureStruct {
    return this._call.inputValues[5].value.toTuple() as DepositCallTheSignatureStruct;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCallTheSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get inputToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get outputToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get destinationAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get theSignature(): SwapCallTheSignatureStruct {
    return this._call.inputValues[6].value.toTuple() as SwapCallTheSignatureStruct;
  }

  get auxiliaryData(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapCallTheSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransmitAndDepositCall extends ethereum.Call {
  get inputs(): TransmitAndDepositCall__Inputs {
    return new TransmitAndDepositCall__Inputs(this);
  }

  get outputs(): TransmitAndDepositCall__Outputs {
    return new TransmitAndDepositCall__Outputs(this);
  }
}

export class TransmitAndDepositCall__Inputs {
  _call: TransmitAndDepositCall;

  constructor(call: TransmitAndDepositCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get nDays(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get poolTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get theSignature(): TransmitAndDepositCallTheSignatureStruct {
    return this._call.inputValues[5].value.toTuple() as TransmitAndDepositCallTheSignatureStruct;
  }
}

export class TransmitAndDepositCall__Outputs {
  _call: TransmitAndDepositCall;

  constructor(call: TransmitAndDepositCall) {
    this._call = call;
  }
}

export class TransmitAndDepositCallTheSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class TransmitAndSwapCall extends ethereum.Call {
  get inputs(): TransmitAndSwapCall__Inputs {
    return new TransmitAndSwapCall__Inputs(this);
  }

  get outputs(): TransmitAndSwapCall__Outputs {
    return new TransmitAndSwapCall__Outputs(this);
  }
}

export class TransmitAndSwapCall__Inputs {
  _call: TransmitAndSwapCall;

  constructor(call: TransmitAndSwapCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inputToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get outputToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get inputAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get outputAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get goodUntil(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get destinationAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get theSignature(): TransmitAndSwapCallTheSignatureStruct {
    return this._call.inputValues[7].value.toTuple() as TransmitAndSwapCallTheSignatureStruct;
  }

  get auxiliaryData(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class TransmitAndSwapCall__Outputs {
  _call: TransmitAndSwapCall;

  constructor(call: TransmitAndSwapCall) {
    this._call = call;
  }
}

export class TransmitAndSwapCallTheSignatureStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class UnlockDepositCall extends ethereum.Call {
  get inputs(): UnlockDepositCall__Inputs {
    return new UnlockDepositCall__Inputs(this);
  }

  get outputs(): UnlockDepositCall__Outputs {
    return new UnlockDepositCall__Outputs(this);
  }
}

export class UnlockDepositCall__Inputs {
  _call: UnlockDepositCall;

  constructor(call: UnlockDepositCall) {
    this._call = call;
  }
}

export class UnlockDepositCall__Outputs {
  _call: UnlockDepositCall;

  constructor(call: UnlockDepositCall) {
    this._call = call;
  }

  get poolTokens(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
