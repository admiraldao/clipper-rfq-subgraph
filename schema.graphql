type Pool @entity {
  # pool address
  id: ID!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # Average trade amount of all time in USD
  avgTrade: BigDecimal!
  # all time number of transactions
  txCount: BigInt!
  # number of all time unique users
  uniqueUsers: BigInt!
  # time snapshots of pool data
  dailyHistory: [DailyPoolStatus!]! @derivedFrom(field: "pool")
  hourlyHistory: [HourlyPoolStatus!]! @derivedFrom(field: "pool")
}

type DailyPoolStatus @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  pool: Pool!
  # number of transactions during period
  txCount: BigInt!
  # volume in USD
  volumeUSD: BigDecimal!
  # Average trade amount of all time in USD
  avgTrade: BigDecimal!
}

type HourlyPoolStatus @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  pool: Pool!
  # number of transactions during period
  txCount: BigInt!
  # volume in USD
  volumeUSD: BigDecimal!
  # Average trade amount of all time in USD
  avgTrade: BigDecimal!
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # transactions across all pools that include this token
  txCount: BigInt!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # total value locked in pool (supports additional pools)
  tvl: BigDecimal!
  # total value locked from derived usd
  tvlUSD: BigDecimal!
  # total amount deposited in pool
  deposited: BigDecimal!
  # total amount in USD deposited in pool
  depositedUSD: BigDecimal!
}

type Swap @entity {
  # transaction hash + "#" + index in swaps Transaction array
  id: ID!
  # pointer to the pool
  pool: Pool!
  # pointer to transaction
  transaction: Bytes!
  # timestamp of transaction
  timestamp: BigInt!
  # allow indexing by tokens
  inToken: Token!
  # allow indexing by tokens
  outToken: Token!
  # sender of the swap
  sender: User!
  # recipient of the swap
  recipient: Bytes!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # delta of inAsset swapped
  amountIn: BigDecimal!
  # delta of outAsset swapped
  amountOut: BigDecimal!
  # derived info
  amountInUSD: BigDecimal!
  amountOutUSD: BigDecimal!

  pricePerInputToken: BigDecimal!
  pricePerOutputToken: BigDecimal!

  # origin of  the transaction
  transactionSource: TransactionSource!
  # order within the txn
  logIndex: BigInt

  # pair traded
  pair: Pair!
}

type Pair @entity {
  # asset 1 + asset 2 address
  id: ID!
  # asset 0 of the pair
  asset0: Token!
  # asset 1 of the pair
  asset1: Token!
  # all time transaction on this pair
  txCount: BigInt!
  # volume of all time transactions in USD
  volumeUSD: BigDecimal!
  # swaps data
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type TransactionSource @entity {
  # origin name
  id: ID!
  # number of all time transactions by source
  txCount: BigInt!
  # derived swaps
  swaps: [Swap!]! @derivedFrom(field: "transactionSource")
}

type User @entity {
  # wallet address
  id: ID!
  # number of all time transactions by user
  txCount: BigInt!
  # timestamp of first transaction
  firstTxTimestamp: BigInt!
  # timestamp of last transaction
  lastTxTimestamp: BigInt!
  # total volume trade by user
  volumeUSD: BigDecimal!
  # list of trades made by the user
  swaps: [Swap!]! @derivedFrom(field: "sender")
}

type Deposit @entity {
  id: ID!
  # timestamp of transaction
  timestamp: BigInt!
  # deposited token
  token: Token!
  # pool deposited to
  pool: Pool!
  # deposited amount
  amount: BigDecimal!
  # captured usd value at the moment of transaction
  amountUsd: BigDecimal!
  # sender of the transaction
  sender: Bytes!
}
