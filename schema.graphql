enum TokenType {
  SHORTTAIL,
  LONGTAIL
}

enum SwapType {
  COVE,
  POOL,
}

type Pool @entity {
  # pool address
  id: ID!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # Average trade amount of all time in USD
  avgTrade: BigDecimal!
  # all time number of transactions
  txCount: BigInt!

  # all time deposits count
  depositCount: BigInt!
  # Average deposit amount of all time in USD
  avgDeposit: BigDecimal!
  # all time deposited amount in USD
  depositedUSD: BigDecimal!

  # all time withdrawals count
  withdrawalCount: BigInt!
  # Average withdrawal amount of all time in USD
  avgWithdraw: BigDecimal!
  # all time withdrew amount in USD
  withdrewUSD: BigDecimal!

  # number of all time unique users
  uniqueUsers: BigInt!
  # number of pool tokens supplied by the smart contract (used for time-travel queries)
  poolTokensSupply: BigInt!
  # time snapshots of pool data
  dailyHistory: [DailyPoolStatus!]! @derivedFrom(field: "pool")
  hourlyHistory: [HourlyPoolStatus!]! @derivedFrom(field: "pool")
}

type DailyPoolStatus @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  pool: Pool!
  # snapshot of number of pool tokens supplied by the smart contract
  poolTokensSupply: BigInt!

  # number of transactions during period
  txCount: BigInt!
  # volume in USD
  volumeUSD: BigDecimal!
  # Average trade amount of all time in USD
  avgTrade: BigDecimal!

  # number of deposits during daily period
  depositCount: BigInt!
  # deposited amount during daily period
  depositedUSD: BigDecimal!
  # Average deposited amount of USD during daily period
  avgDeposit: BigDecimal!

  # number of withdrawals during daily period
  withdrawalCount: BigInt!
  # withdrew amount during daily period
  withdrewUSD: BigDecimal!
  # Average withdrawal amount of USD during daily period
  avgWithdraw: BigDecimal!
}

type HourlyPoolStatus @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  pool: Pool!

  # number of transactions during daily period
  txCount: BigInt!
  # volume in USD
  volumeUSD: BigDecimal!
  # Average trade amount of USD during hourly period
  avgTrade: BigDecimal!

  # number of deposits during hourly period
  depositCount: BigInt!
  # deposited amount during hourly period
  depositedUSD: BigDecimal!
  # Average deposited amount of USD during hourly period
  avgDeposit: BigDecimal!

  # number of withdrawals during hourly period
  withdrawalCount: BigInt!
  # withdrew amount during hourly period
  withdrewUSD: BigDecimal!
  # Average withdrawal amount of USD during hourly period
  avgWithdraw: BigDecimal!
}

type Token @entity {
  # token address
  id: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # transactions across all pools that include this token
  txCount: BigInt!
  # volume in token units
  volume: BigDecimal!
  # volume in derived USD
  volumeUSD: BigDecimal!
  # total value locked in pool (supports additional pools)
  tvl: BigDecimal!
  # total value locked from derived usd
  tvlUSD: BigDecimal!
  # total amount deposited in pool
  deposited: BigDecimal!
  # total amount in USD deposited in pool
  depositedUSD: BigDecimal!
  # type of token (longtail or shorttail)
  type: TokenType
  # if type is longtail, cove should be set
  cove: Cove
}

type Swap @entity(immutable: true) {
  # transaction hash + "-" + event log index
  id: ID!
  # pointer to the pool
  pool: Pool
  # pointer to transaction
  transaction: Bytes!
  # timestamp of transaction
  timestamp: BigInt!
  # allow indexing by tokens
  inToken: Token!
  # allow indexing by tokens
  outToken: Token!
  # sender of the swap
  sender: User!
  # recipient of the swap
  recipient: Bytes!
  # txn origin
  origin: Bytes! # the EOA that initiated the txn
  # delta of inAsset swapped
  amountIn: BigDecimal!
  # delta of outAsset swapped
  amountOut: BigDecimal!
  # derived info
  amountInUSD: BigDecimal!
  amountOutUSD: BigDecimal!

  pricePerInputToken: BigDecimal!
  pricePerOutputToken: BigDecimal!

  # origin of  the transaction
  transactionSource: TransactionSource!
  # order within the txn
  logIndex: BigInt

  # pair traded (not required for cove swaps)
  pair: Pair
  swapType: SwapType
}

type Pair @entity {
  # asset 1 + asset 2 address
  id: ID!
  # asset 0 of the pair
  asset0: Token!
  # asset 1 of the pair
  asset1: Token!
  # all time transaction on this pair
  txCount: BigInt!
  # volume of all time transactions in USD
  volumeUSD: BigDecimal!
  # swaps data
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type TransactionSource @entity {
  # origin name
  id: ID!
  # number of all time transactions by source
  txCount: BigInt!
  # derived swaps
  swaps: [Swap!]! @derivedFrom(field: "transactionSource")
}

type User @entity {
  # wallet address
  id: ID!
  # number of all time transactions by user
  txCount: BigInt!
  # timestamp of first transaction
  firstTxTimestamp: BigInt!
  # timestamp of last transaction
  lastTxTimestamp: BigInt!
  # total volume trade by user
  volumeUSD: BigDecimal!
  # list of trades made by the user
  swaps: [Swap!]! @derivedFrom(field: "sender")
}

type Deposit @entity(immutable: true) {
  id: ID!
  # timestamp of transaction
  timestamp: BigInt!
  # pool deposited to
  pool: Pool!
  # pool tokens received by the deposit
  poolTokens: BigDecimal!
  # The equivalent usd value of received pool tokens at the moment of tx
  amountUsd: BigDecimal!
  # sender of the transaction
  depositor: Bytes!
}

type CoveDeposit @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  cove: Cove!
  amountUsd: BigDecimal!
  depositor: Bytes!
}

type Withdrawal @entity(immutable: true) {
  id: ID!
  # timestamp of transaction
  timestamp: BigInt!
  # pool to where the whitdrawal was done
  pool: Pool!
  # Pool tokens burned to withdraw
  poolTokens: BigDecimal!
  # captured usd value at the moment of transaction
  amountUsd: BigDecimal!
  # withdrawer of the transaction
  withdrawer: Bytes!
}

type Cove @entity {
  id: ID!
  # pointer to CoveAsset
  longtailAsset: Token!
  # all time USD swapped
  volumeUSD: BigDecimal!
  # all time number of swaps using this cove 
  swapCount: BigInt!

  # tvl of pool token and long tail currently held by the cove.
  poolTokenAmount: BigDecimal!
  longtailTokenAmount: BigDecimal!

  # poolTokenAmount times the price of pool token times two
  tvlUSD: BigDecimal!

  # wallet address that opened the cove.
  creator: Bytes!
  # timestamp to when the cove was opened
  createdAt: BigInt!
  # transaction that initialized the cove.
  transaction: Bytes!

  # all time deposits count
  depositCount: BigInt!
  # all time withdrawals count
  withdrawalCount: BigInt!
}


type UserCoveStake @entity {
  # {coveId}-{wallet}
  id: ID!
  cove: Cove!
  user: Bytes!
  depositTokens: BigInt!
  active: Boolean!
}
